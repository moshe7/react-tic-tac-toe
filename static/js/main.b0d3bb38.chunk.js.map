{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","square","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","length","calculateWinner","winner","setState","concat","indexInSquare","step","status","current","winInfo","moves","map","move","y","Math","round","x","cssBoldRow","desc","jumpTo","isDraw","reverse","handleClick","line","changeListOrder","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0d3bb38.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  const className = 'square' + (props.highlight ? ' highlight' : '');\n  return (\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        highlight={winLine && winLine.includes(i)}\n      />\n    );\n  }\n\n  render() {\n    // Use two loops to make the squares\n    const boardSize = 3;\n    let square = [];\n    for (let i = 0; i < boardSize; i++) {\n      let row = [];\n      for (let j = 0; j < boardSize; j++) {\n        row.push(this.renderSquare(i * boardSize + j));\n      }\n      square.push(<div className=\"board-row\">{row}</div>);\n    }\n    return <div>{square}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{ squares: squares, indexInSquare: i }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  changeListOrder() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winInfo = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const y = Math.round(step.indexInSquare / 3);\n      const x = (step.indexInSquare % 3) + 1;\n      const cssBoldRow = move === stepNumber ? 'current-move-selected' : '';\n      const desc = move\n        ? `Go to move # ${move} (${x}, ${y})`\n        : 'Go to game start';\n      return (\n        <li key={move}>\n          <button className={cssBoldRow} onClick={() => this.jumpTo(move)}>\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winInfo.winner) {\n      status = 'Winner: ' + winInfo.winner;\n    } else if(winInfo.isDraw){\n      status = 'Draw';\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    }\n\n    if (!this.state.isAscending) {\n      moves.reverse();\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n          squares={current.squares} \n          onClick={i => this.handleClick(i)}\n          winLine={winInfo.line} />\n        </div>\n        <div className=\"game-info\">\n          <div>\n            <button onClick={() => this.changeListOrder()}>\n              {this.state.isAscending ? 'descending' : 'ascending'}\n            </button>\n          </div>\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n        isDraw: false\n      };\n    }\n  }\n  let isDraw = true;\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };;\n}\n"],"sourceRoot":""}